/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Content, GenerateContentResult, GenerationConfig, Part, SafetySetting, StartChatSessionRequest, StreamGenerateContentResult, Tool } from '../types/content';
/**
 * Chat session to make multi-turn send message request.
 * Users can instantiate this using startChat method in GenerativeModel class.
 * `sendMessage` method makes async call to get response of a chat message.
 * `sendMessageStream` method makes async call to stream response of a chat message.
 */
export declare class ChatSession {
    private project;
    private location;
    private historyInternal;
    private _send_stream_promise;
    private publisher_model_endpoint;
    private googleAuth;
    generation_config?: GenerationConfig;
    safety_settings?: SafetySetting[];
    tools?: Tool[];
    private api_endpoint?;
    get history(): Content[];
    /**
     * @constructor
     * @param {StartChatSessionRequest} request - {@link StartChatSessionRequest}
     */
    constructor(request: StartChatSessionRequest);
    /**
     * Get access token from GoogleAuth. Throws GoogleAuthError when fails.
     * @return {Promise<any>} Promise of token
     */
    get token(): Promise<any>;
    /**
     * Make an sync call to send message.
     * @param {string | Array<string | Part>} request - send message request. {@link Part}
     * @return {Promise<GenerateContentResult>} Promise of {@link GenerateContentResult}
     */
    sendMessage(request: string | Array<string | Part>): Promise<GenerateContentResult>;
    appendHistory(streamGenerateContentResultPromise: Promise<StreamGenerateContentResult>, newContent: Content[]): Promise<void>;
    /**
     * Make an async call to stream send message. Response will be returned in stream.
     * @param {string | Array<string | Part>} request - send message request. {@link Part}
     * @return {Promise<StreamGenerateContentResult>} Promise of {@link StreamGenerateContentResult}
     */
    sendMessageStream(request: string | Array<string | Part>): Promise<StreamGenerateContentResult>;
}
/**
 * Chat session to make multi-turn send message request.
 * `sendMessage` method makes async call to get response of a chat message.
 * `sendMessageStream` method makes async call to stream response of a chat message.
 */
export declare class ChatSessionPreview {
    private project;
    private location;
    private historyInternal;
    private _send_stream_promise;
    private publisher_model_endpoint;
    private googleAuth;
    generation_config?: GenerationConfig;
    safety_settings?: SafetySetting[];
    tools?: Tool[];
    private api_endpoint?;
    get history(): Content[];
    /**
     * @constructor
     * @param {StartChatSessionRequest} request - {@link StartChatSessionRequest}
     */
    constructor(request: StartChatSessionRequest);
    /**
     * Get access token from GoogleAuth. Throws GoogleAuthError when fails.
     * @return {Promise<any>} Promise of token
     */
    get token(): Promise<any>;
    /**
     * Make an sync call to send message.
     * @param {string | Array<string | Part>} request - send message request. {@link Part}
     * @return {Promise<GenerateContentResult>} Promise of {@link GenerateContentResult}
     */
    sendMessage(request: string | Array<string | Part>): Promise<GenerateContentResult>;
    appendHistory(streamGenerateContentResultPromise: Promise<StreamGenerateContentResult>, newContent: Content[]): Promise<void>;
    /**
     * Make an async call to stream send message. Response will be returned in stream.
     * @param {string | Array<string | Part>} request - send message request. {@link Part}
     * @return {Promise<StreamGenerateContentResult>} Promise of {@link StreamGenerateContentResult}
     */
    sendMessageStream(request: string | Array<string | Part>): Promise<StreamGenerateContentResult>;
}
