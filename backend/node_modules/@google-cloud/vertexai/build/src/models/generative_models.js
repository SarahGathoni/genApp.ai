"use strict";
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenerativeModelPreview = exports.GenerativeModel = void 0;
const errors_1 = require("../types/errors");
const count_tokens_1 = require("../functions/count_tokens");
const generate_content_1 = require("../functions/generate_content");
const chat_session_1 = require("./chat_session");
const util_1 = require("../util");
/**
 * Base class for generative models.
 * NOTE: this class should not be instantiated directly. Use
 * `vertexai.preview.getGenerativeModel()` instead.
 */
class GenerativeModel {
    /**
     * @constructor
     * @param {GetGenerativeModelParams} getGenerativeModelParams - {@link GetGenerativeModelParams}
     */
    constructor(getGenerativeModelParams) {
        this.project = getGenerativeModelParams.project;
        this.location = getGenerativeModelParams.location;
        this.apiEndpoint = getGenerativeModelParams.apiEndpoint;
        this.googleAuth = getGenerativeModelParams.googleAuth;
        this.model = getGenerativeModelParams.model;
        this.generation_config = getGenerativeModelParams.generation_config;
        this.safety_settings = getGenerativeModelParams.safety_settings;
        this.tools = getGenerativeModelParams.tools;
        if (this.model.startsWith('models/')) {
            this.publisherModelEndpoint = `publishers/google/${this.model}`;
        }
        else {
            this.publisherModelEndpoint = `publishers/google/models/${this.model}`;
        }
    }
    /**
     * Get access token from GoogleAuth. Throws GoogleAuthError when fails.
     * @return {Promise<any>} Promise of token
     */
    get token() {
        const tokenPromise = this.googleAuth.getAccessToken().catch(e => {
            throw new errors_1.GoogleAuthError(util_1.constants.CREDENTIAL_ERROR_MESSAGE, e);
        });
        return tokenPromise;
    }
    /**
     * Make a async call to generate content.
     * @param request A GenerateContentRequest object with the request contents.
     * @return The GenerateContentResponse object with the response candidates.
     */
    async generateContent(request) {
        return (0, generate_content_1.generateContent)(this.location, this.project, this.publisherModelEndpoint, this.token, request, this.apiEndpoint, this.generation_config, this.safety_settings);
    }
    /**
     * Make an async stream request to generate content. The response will be returned in stream.
     * @param {GenerateContentRequest} request - {@link GenerateContentRequest}
     * @return {Promise<StreamGenerateContentResult>} Promise of {@link StreamGenerateContentResult}
     */
    async generateContentStream(request) {
        return (0, generate_content_1.generateContentStream)(this.location, this.project, this.publisherModelEndpoint, this.token, request, this.apiEndpoint, this.generation_config, this.safety_settings);
    }
    /**
     * Make a async request to count tokens.
     * @param request A CountTokensRequest object with the request contents.
     * @return The CountTokensResponse object with the token count.
     */
    async countTokens(request) {
        return (0, count_tokens_1.countTokens)(this.location, this.project, this.publisherModelEndpoint, this.token, request, this.apiEndpoint);
    }
    /**
     * Instantiate a ChatSession.
     * This method doesn't make any call to remote endpoint.
     * Any call to remote endpoint is implemented in ChatSession class @see ChatSession
     * @param{StartChatParams} [request] - {@link StartChatParams}
     * @return {ChatSession} {@link ChatSession}
     */
    startChat(request) {
        var _a, _b, _c, _d;
        const startChatRequest = {
            project: this.project,
            location: this.location,
            googleAuth: this.googleAuth,
            publisher_model_endpoint: this.publisherModelEndpoint,
        };
        if (request) {
            startChatRequest.history = request.history;
            startChatRequest.generation_config =
                (_a = request.generation_config) !== null && _a !== void 0 ? _a : this.generation_config;
            startChatRequest.safety_settings =
                (_b = request.safety_settings) !== null && _b !== void 0 ? _b : this.safety_settings;
            startChatRequest.tools = (_c = request.tools) !== null && _c !== void 0 ? _c : this.tools;
            startChatRequest.api_endpoint = (_d = request.api_endpoint) !== null && _d !== void 0 ? _d : this.apiEndpoint;
        }
        return new chat_session_1.ChatSession(startChatRequest);
    }
}
exports.GenerativeModel = GenerativeModel;
/**
 * Base class for generative models in preview.
 * NOTE: this class should not be instantiated directly. Use
 * `vertexai.preview.getGenerativeModel()` instead.
 */
class GenerativeModelPreview {
    /**
     * @constructor
     * @param {GetGenerativeModelParams} getGenerativeModelParams - {@link GetGenerativeModelParams}
     */
    constructor(getGenerativeModelParams) {
        this.project = getGenerativeModelParams.project;
        this.location = getGenerativeModelParams.location;
        this.apiEndpoint = getGenerativeModelParams.apiEndpoint;
        this.googleAuth = getGenerativeModelParams.googleAuth;
        this.model = getGenerativeModelParams.model;
        this.generation_config = getGenerativeModelParams.generation_config;
        this.safety_settings = getGenerativeModelParams.safety_settings;
        this.tools = getGenerativeModelParams.tools;
        if (this.model.startsWith('models/')) {
            this.publisherModelEndpoint = `publishers/google/${this.model}`;
        }
        else {
            this.publisherModelEndpoint = `publishers/google/models/${this.model}`;
        }
    }
    /**
     * Get access token from GoogleAuth. Throws GoogleAuthError when fails.
     * @return {Promise<any>} Promise of token
     */
    get token() {
        const tokenPromise = this.googleAuth.getAccessToken().catch(e => {
            throw new errors_1.GoogleAuthError(util_1.constants.CREDENTIAL_ERROR_MESSAGE, e);
        });
        return tokenPromise;
    }
    /**
     * Make a async call to generate content.
     * @param request A GenerateContentRequest object with the request contents.
     * @return The GenerateContentResponse object with the response candidates.
     */
    async generateContent(request) {
        return (0, generate_content_1.generateContent)(this.location, this.project, this.publisherModelEndpoint, this.token, request, this.apiEndpoint, this.generation_config, this.safety_settings);
    }
    /**
     * Make an async stream request to generate content. The response will be returned in stream.
     * @param {GenerateContentRequest} request - {@link GenerateContentRequest}
     * @return {Promise<StreamGenerateContentResult>} Promise of {@link StreamGenerateContentResult}
     */
    async generateContentStream(request) {
        return (0, generate_content_1.generateContentStream)(this.location, this.project, this.publisherModelEndpoint, this.token, request, this.apiEndpoint, this.generation_config, this.safety_settings);
    }
    /**
     * Make a async request to count tokens.
     * @param request A CountTokensRequest object with the request contents.
     * @return The CountTokensResponse object with the token count.
     */
    async countTokens(request) {
        return (0, count_tokens_1.countTokens)(this.location, this.project, this.publisherModelEndpoint, this.token, request, this.apiEndpoint);
    }
    /**
     * Instantiate a ChatSessionPreview.
     * This method doesn't make any call to remote endpoint.
     * Any call to remote endpoint is implemented in ChatSessionPreview class @see ChatSessionPreview
     * @param{StartChatParams} [request] - {@link StartChatParams}
     * @return {ChatSessionPrevew} {@link ChatSessionPrevew}
     */
    startChat(request) {
        var _a, _b, _c;
        const startChatRequest = {
            project: this.project,
            location: this.location,
            googleAuth: this.googleAuth,
            publisher_model_endpoint: this.publisherModelEndpoint,
        };
        if (request) {
            startChatRequest.history = request.history;
            startChatRequest.generation_config =
                (_a = request.generation_config) !== null && _a !== void 0 ? _a : this.generation_config;
            startChatRequest.safety_settings =
                (_b = request.safety_settings) !== null && _b !== void 0 ? _b : this.safety_settings;
            startChatRequest.tools = (_c = request.tools) !== null && _c !== void 0 ? _c : this.tools;
        }
        return new chat_session_1.ChatSessionPreview(startChatRequest);
    }
}
exports.GenerativeModelPreview = GenerativeModelPreview;
//# sourceMappingURL=generative_models.js.map