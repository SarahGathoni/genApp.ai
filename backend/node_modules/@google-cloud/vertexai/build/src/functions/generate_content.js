"use strict";
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateContentStream = exports.generateContent = void 0;
const errors_1 = require("../types/errors");
const constants = require("../util/constants");
const post_fetch_processing_1 = require("./post_fetch_processing");
const post_request_1 = require("./post_request");
const pre_fetch_processing_1 = require("./pre_fetch_processing");
async function generateContent(location, project, publisherModelEndpoint, token, request, apiEndpoint, generation_config, safety_settings) {
    var _a, _b, _c;
    request = (0, pre_fetch_processing_1.formatContentRequest)(request, generation_config, safety_settings);
    (0, pre_fetch_processing_1.validateGenerateContentRequest)(request);
    if (request.generation_config) {
        request.generation_config = (0, pre_fetch_processing_1.validateGenerationConfig)(request.generation_config);
    }
    const generateContentRequest = {
        contents: request.contents,
        generation_config: (_a = request.generation_config) !== null && _a !== void 0 ? _a : generation_config,
        safety_settings: (_b = request.safety_settings) !== null && _b !== void 0 ? _b : safety_settings,
        tools: (_c = request.tools) !== null && _c !== void 0 ? _c : [],
    };
    const apiVersion = request.tools ? 'v1beta1' : 'v1';
    const response = await (0, post_request_1.postRequest)({
        region: location,
        project: project,
        resourcePath: publisherModelEndpoint,
        resourceMethod: constants.GENERATE_CONTENT_METHOD,
        token: await token,
        data: generateContentRequest,
        apiEndpoint: apiEndpoint,
        apiVersion: apiVersion,
    }).catch(e => {
        throw new errors_1.GoogleGenerativeAIError('exception posting request', e);
    });
    await (0, post_fetch_processing_1.throwErrorIfNotOK)(response).catch(e => {
        throw e;
    });
    return (0, post_fetch_processing_1.processNonStream)(response);
}
exports.generateContent = generateContent;
/**
 * Make an async stream request to generate content. The response will be
 * returned in stream.
 * @param {GenerateContentRequest} request - {@link GenerateContentRequest}
 * @return {Promise<StreamGenerateContentResult>} Promise of {@link
 *     StreamGenerateContentResult}
 */
async function generateContentStream(location, project, publisherModelEndpoint, token, request, apiEndpoint, generation_config, safety_settings) {
    var _a, _b, _c;
    request = (0, pre_fetch_processing_1.formatContentRequest)(request, generation_config, safety_settings);
    (0, pre_fetch_processing_1.validateGenerateContentRequest)(request);
    if (request.generation_config) {
        request.generation_config = (0, pre_fetch_processing_1.validateGenerationConfig)(request.generation_config);
    }
    const generateContentRequest = {
        contents: request.contents,
        generation_config: (_a = request.generation_config) !== null && _a !== void 0 ? _a : generation_config,
        safety_settings: (_b = request.safety_settings) !== null && _b !== void 0 ? _b : safety_settings,
        tools: (_c = request.tools) !== null && _c !== void 0 ? _c : [],
    };
    const apiVersion = request.tools ? 'v1beta1' : 'v1';
    const response = await (0, post_request_1.postRequest)({
        region: location,
        project: project,
        resourcePath: publisherModelEndpoint,
        resourceMethod: constants.STREAMING_GENERATE_CONTENT_METHOD,
        token: await token,
        data: generateContentRequest,
        apiEndpoint: apiEndpoint,
        apiVersion: apiVersion,
    }).catch(e => {
        throw new errors_1.GoogleGenerativeAIError('exception posting request', e);
    });
    await (0, post_fetch_processing_1.throwErrorIfNotOK)(response).catch(e => {
        throw e;
    });
    return (0, post_fetch_processing_1.processStream)(response);
}
exports.generateContentStream = generateContentStream;
//# sourceMappingURL=generate_content.js.map